import winston from 'winston'
import CPUConfig from './emu/cpu/CPUConfig'
import CPU8086 from './emu/cpu/8086.js'
import {
  regAH, regAL, regBH, regBL, regCH, regCL, regDH, regDL,
  regAX, regBX, regCX, regDX,
  regSI, regDI, regBP, regSP, regIP,
  regCS, regDS, regES, regSS,
} from './emu/Constants';

let codegolf = [
  0x81, 0xFC, 0x00, 0x01, 0x74, 0x01, 0xF4, 0xBC, 0x00, 0x10, 0xB0, 0x2E, 0xBB,
  0x00, 0x00, 0x4B, 0x83, 0xFB, 0xFF, 0x75, 0xF1, 0xE8, 0x51, 0x01, 0x43, 0x75,
  0xEB, 0xE8, 0x4B, 0x01, 0x31, 0xC9, 0x09, 0xCB, 0x75, 0xE2, 0x72, 0xE0, 0xE8,
  0x40, 0x01, 0xB9, 0x00, 0x80, 0x39, 0xD9, 0x76, 0xD6, 0xE8, 0x36, 0x01, 0x01,
  0xCB, 0x72, 0xCF, 0xE8, 0x2F, 0x01, 0x01, 0xDB, 0x83, 0xD1, 0x00, 0x79, 0xC5,
  0x72, 0xC3, 0x51, 0x83, 0xE1, 0x01, 0x74, 0xBD, 0xE8, 0x1D, 0x01, 0x59, 0xF9,
  0xBB, 0x00, 0x80, 0x19, 0xD9, 0x75, 0xB1, 0x72, 0xAF, 0xE8, 0x0F, 0x01, 0xE8,
  0x00, 0x00, 0x5B, 0x81, 0xFB, 0x5D, 0x00, 0x75, 0xA2, 0x81, 0xFC, 0x00, 0x10,
  0x75, 0x9C, 0xE8, 0xFC, 0x00, 0xBB, 0x72, 0x00, 0x53, 0xC3, 0x81, 0xFC, 0x00,
  0x10, 0x75, 0x8E, 0xE8, 0xEE, 0x00, 0x90, 0x90, 0x90, 0xEB, 0x01, 0xF4, 0xE8,
  0xF8, 0x00, 0xB8, 0xC5, 0x01, 0xE8, 0xCA, 0x00, 0xE8, 0xEF, 0x00, 0xB0, 0x30,
  0xE8, 0xD7, 0x00, 0xFE, 0xC0, 0x3C, 0x7F, 0x75, 0xF7, 0xB0, 0x23, 0xC7, 0x06,
  0xD3, 0x01, 0x90, 0x01, 0xB1, 0x50, 0xE8, 0xC4, 0x00, 0xFE, 0xC9, 0x75, 0xF9,
  0x81, 0x3E, 0xD3, 0x01, 0xE0, 0x01, 0x75, 0x0A, 0xB1, 0x50, 0xC7, 0x06, 0xD3,
  0x01, 0x80, 0x07, 0xEB, 0xE7, 0xC7, 0x06, 0xD3, 0x01, 0xE0, 0x01, 0xB1, 0x12,
  0xE8, 0xA3, 0x00, 0xE8, 0xA0, 0x00, 0x83, 0x06, 0xD3, 0x01, 0x4C, 0xE8, 0x98,
  0x00, 0xE8, 0x95, 0x00, 0xFE, 0xC9, 0x75, 0xEB, 0xC7, 0x06, 0xD3, 0x01, 0x34,
  0x02, 0x31, 0xC0, 0xBA, 0x01, 0x00, 0xB9, 0x11, 0x00, 0x01, 0xC2, 0xE8, 0x9F,
  0x00, 0x50, 0xB8, 0x20, 0x00, 0xE8, 0x77, 0x00, 0x58, 0x92, 0x49, 0x75, 0xEF,
  0xC7, 0x06, 0xD3, 0x01, 0xD4, 0x02, 0xB9, 0x00, 0x00, 0x89, 0xC8, 0xE8, 0x3F,
  0x00, 0xE8, 0x82, 0x00, 0xB8, 0x20, 0x00, 0xE8, 0x5B, 0x00, 0x41, 0x83, 0xF9,
  0x14, 0x76, 0xEC, 0xC7, 0x06, 0xD3, 0x01, 0x74, 0x03, 0xBB, 0x02, 0x00, 0x80,
  0x8F, 0xD5, 0x01, 0x00, 0x75, 0x19, 0x89, 0xD8, 0xE8, 0x61, 0x00, 0xB8, 0x20,
  0x00, 0xE8, 0x3A, 0x00, 0x89, 0xDF, 0x80, 0x8D, 0xD5, 0x01, 0x01, 0x01, 0xDF,
  0x83, 0xFF, 0x65, 0x76, 0xF4, 0x43, 0x83, 0xFB, 0x64, 0x76, 0xDA, 0xF4, 0x89,
  0xC3, 0x31, 0xD2, 0x09, 0xDB, 0x74, 0x05, 0x01, 0xC2, 0x4B, 0xEB, 0xF9, 0x89,
  0xD0, 0xC3, 0x53, 0x52, 0x89, 0xC3, 0x8A, 0x17, 0x43, 0x86, 0xC2, 0xE8, 0x09,
  0x00, 0x86, 0xC2, 0x20, 0xD2, 0x75, 0xF2, 0x5A, 0x5B, 0xC3, 0x53, 0x57, 0xBB,
  0x00, 0x80, 0x8B, 0x3E, 0xD3, 0x01, 0x88, 0x01, 0x47, 0x89, 0x3E, 0xD3, 0x01,
  0x5F, 0x5B, 0xC3, 0x8B, 0x3E, 0xD3, 0x01, 0x83, 0xEF, 0x50, 0x79, 0xFB, 0x29,
  0x3E, 0xD3, 0x01, 0xC3, 0x53, 0x50, 0xB3, 0x30, 0x83, 0xF8, 0x09, 0x76, 0x2A,
  0x83, 0xF8, 0x63, 0x76, 0x13, 0x83, 0xE8, 0x64, 0xFE, 0xC3, 0x83, 0xF8, 0x63,
  0x77, 0xF6, 0x86, 0xD8, 0xE8, 0xC2, 0xFF, 0x86, 0xD8, 0xB3, 0x30, 0x83, 0xF8,
  0x09, 0x76, 0x06, 0x83, 0xE8, 0x0A, 0x43, 0xEB, 0xF5, 0x86, 0xC3, 0xE8, 0xAE,
  0xFF, 0x88, 0xD8, 0x04, 0x30, 0xE8, 0xA7, 0xFF, 0x58, 0x5B, 0xC3, 0x48, 0x65,
  0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00, 0x00,
  0x00];

// Setup
let config = new CPUConfig({
  memorySize: 2**16,
});
let cpu = new CPU8086(config);

// Load program
for (let i = 0; i < codegolf.length; i++) {
  cpu.mem8[i] = codegolf[i];
}
cpu.reg16[regIP] = 0;
cpu.reg16[regSP] = 0x100;
cpu.reg16[regCS] = 0x0000;

winston.level = 'debug';

for (let i = 0; i <= 40; i++) {
  winston.log("debug", "-".repeat(80));

  cpu.cycle();
}

// Misc code
//
// function writeState(state, file) {
//   let bson = new BSON();
//   let data = bson.serialize(state);
//
//   fs.writeFile(file, data, (err) => {
//     // throws an error, you could also catch it here
//     if (err) throw err;
//     winston.log("info", 'state saved!');
//   });
// }
//
// function loadState(file) {
//   let bson = new BSON();
//   let data = fs.readFileSync(file);
//   return bson.deserialize(data);
// }
//
// let compareStates = (givenState, expectedState) => {
//   let diff = "";
//   let same = true;
//
//   // let reg16 = new Uint16Array(givenState.reg8.buffer);
//
//   let registersWord = {regAX, regBX, regCX, regDX, regSI, regDI, regBP, regSP, regIP, regCS, regDS, regES, regSS};
//
//   if (givenState.cycleCount !== expectedState.cycleCount) {
//     same = false;
//     diff += "CYCLE COUNT: " + givenState.cycleCount + " (given) != " + expectedState.cycleCount + " (expected)\n";
//   }
//   if (givenState.addrSeg !== expectedState.addrSeg) {
//     same = false;
//     diff += "ADDR SEG: " + givenState.addrSeg + " (given) != " + expectedState.addrSeg + " (expected)\n";
//   }
//   if (givenState.repType !== expectedState.repType) {
//     same = false;
//     diff += "REP TYPE: " + givenState.repType + " (given) != " + expectedState.repType + " (expected)\n";
//   }
//   if (givenState.cycleIP !== expectedState.cycleIP) {
//     same = false;
//     diff += "CYCLE IP: " + givenState.cycleIP + " (given) != " + expectedState.cycleIP + " (expected)\n";
//   }
//
//   for (let k in givenState.opcode) {
//     if (givenState.opcode[k] !== expectedState.opcode[k]) {
//       same = false;
//       diff += "OPCODE: [" + k + "] " + givenState.opcode[k] + " (given) != " + expectedState.opcode[k] + " (expected)\n";
//     }
//   }
//
//   // Compare memory addresses
//   for (let i = 0; i < givenState.mem16.length; i++) {
//     if (givenState.mem16[i] !== expectedState.mem16[i]) {
//       same = false;
//       diff += "MEM: [" + hexString16(i) + "] " + hexString16(givenState.mem16[i]) + " (given) != " + hexString16(expectedState.mem16[i]) + " (expected)\n";
//     }
//   }
//
//   // Compare registers
//   for (let reg in registersWord) {
//     if (givenState.mem16[registersWord[reg]] !== expectedState.mem16[registersWord[reg]]) {
//       same = false;
//       diff += "REG: [" + reg + "] " + hexString16(givenState.mem16[registersWord[reg]]) + " (given) != " + hexString16(expectedState.mem16[registersWord[reg]]) + " (expected)\n";
//     }
//   }
//
//   return [same, diff];
// };
